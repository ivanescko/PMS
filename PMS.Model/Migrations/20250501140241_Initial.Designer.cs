// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PMS.Model.Context;

#nullable disable

namespace PMS.Model.Migrations
{
    [DbContext(typeof(PmsDbContext))]
    [Migration("20250501140241_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PMS.Model.Entities.AccessRole", b =>
                {
                    b.Property<int>("AccessRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AccessRoleID"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("AccessRoleID");

                    b.ToTable("AccessRole", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DepartmentID"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("DepartmentID");

                    b.ToTable("Department", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("EmployeeID"));

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("integer");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<bool>("Gender")
                        .HasColumnType("boolean");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("SpecialityID")
                        .HasColumnType("integer");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("EmployeeID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("SpecialityID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Employee", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.Module", b =>
                {
                    b.Property<int>("ModuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ModuleID"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ModuleID");

                    b.ToTable("Module", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.ModuleAccessRole", b =>
                {
                    b.Property<int>("AccessRoleID")
                        .HasColumnType("integer");

                    b.Property<int>("ModuleID")
                        .HasColumnType("integer");

                    b.Property<bool>("Create")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("Delete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("Read")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("Update")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("AccessRoleID", "ModuleID");

                    b.HasIndex("ModuleID");

                    b.ToTable("ModuleAccessRole", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectID"));

                    b.Property<DateOnly?>("ActualEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ActualStartDate")
                        .HasColumnType("date");

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateOnly?>("EstimatedEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("EstimatedStartDate")
                        .HasColumnType("date");

                    b.Property<int>("ManagerID")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectCategoryID")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectStatusID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ProjectID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ManagerID");

                    b.HasIndex("ProjectCategoryID");

                    b.HasIndex("ProjectStatusID");

                    b.ToTable("Project", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.ProjectCategory", b =>
                {
                    b.Property<int>("ProjectCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectCategoryID"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ProjectCategoryID");

                    b.ToTable("ProjectCategory", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.ProjectRelease", b =>
                {
                    b.Property<int>("ProjectReleaseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectReleaseID"));

                    b.Property<int>("ProjectID")
                        .HasColumnType("integer");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("ProjectReleaseID");

                    b.HasIndex("ProjectID");

                    b.ToTable("ProjectRelease", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.ProjectStatus", b =>
                {
                    b.Property<int>("ProjectStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectStatusID"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ProjectStatusID");

                    b.ToTable("ProjectStatus", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.ProjectTask", b =>
                {
                    b.Property<int>("ProjectTaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectTaskID"));

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("ExecutorUserID")
                        .HasColumnType("integer");

                    b.Property<int?>("ParentTaskID")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectReleaseID")
                        .HasColumnType("integer");

                    b.Property<int?>("ProjectTaskCategoryID")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectTaskStatusID")
                        .HasColumnType("integer");

                    b.Property<int?>("ResponsibleUserID")
                        .HasColumnType("integer");

                    b.Property<DateOnly?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ProjectTaskID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ExecutorUserID");

                    b.HasIndex("ParentTaskID");

                    b.HasIndex("ProjectReleaseID");

                    b.HasIndex("ProjectTaskCategoryID");

                    b.HasIndex("ProjectTaskStatusID");

                    b.HasIndex("ResponsibleUserID");

                    b.ToTable("ProjectTask", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.ProjectTaskCategory", b =>
                {
                    b.Property<int>("ProjectTaskCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectTaskCategoryID"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ProjectTaskCategoryID");

                    b.ToTable("ProjectTaskCategory", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.ProjectTaskStatus", b =>
                {
                    b.Property<int>("ProjectTaskStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ProjectTaskStatusID"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ProjectTaskStatusID");

                    b.ToTable("ProjectTaskStatus", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.Speciality", b =>
                {
                    b.Property<int>("SpecialityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SpecialityID"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("SpecialityID");

                    b.ToTable("Speciality", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.Sprint", b =>
                {
                    b.Property<int>("SprintID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SprintID"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("Goal")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ProjectID")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("SprintID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Sprint", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.SprintTask", b =>
                {
                    b.Property<int>("SprintID")
                        .HasColumnType("integer");

                    b.Property<int>("ProjectTaskID")
                        .HasColumnType("integer");

                    b.Property<int>("SprintTaskStatusID")
                        .HasColumnType("integer");

                    b.HasKey("SprintID", "ProjectTaskID");

                    b.HasIndex("ProjectTaskID");

                    b.HasIndex("SprintTaskStatusID");

                    b.ToTable("SprintTask", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.SprintTaskStatus", b =>
                {
                    b.Property<int>("SprintTaskStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SprintTaskStatusID"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("SprintTaskStatusID");

                    b.ToTable("SprintTaskStatus", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserID"));

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("UserID");

                    b.ToTable("User", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.UserAccessRole", b =>
                {
                    b.Property<int>("AccessRoleID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("AccessRoleID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserAccessRole", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.WorkTeam", b =>
                {
                    b.Property<int>("WorkTeamID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkTeamID"));

                    b.Property<int>("CreatedByUserID")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ProjectID")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("WorkTeamStatusID")
                        .HasColumnType("integer");

                    b.HasKey("WorkTeamID");

                    b.HasIndex("CreatedByUserID");

                    b.HasIndex("ProjectID")
                        .IsUnique();

                    b.HasIndex("WorkTeamStatusID");

                    b.ToTable("WorkTeam", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.WorkTeamRole", b =>
                {
                    b.Property<int>("WorkTeamRoleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkTeamRoleID"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("WorkTeamRoleID");

                    b.ToTable("WorkTeamRole", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.WorkTeamRoleUser", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.Property<int>("WorkTeamID")
                        .HasColumnType("integer");

                    b.Property<int>("WorkTeamRoleID")
                        .HasColumnType("integer");

                    b.HasKey("UserID", "WorkTeamID", "WorkTeamRoleID");

                    b.HasIndex("WorkTeamID");

                    b.HasIndex("WorkTeamRoleID");

                    b.ToTable("WorkTeamRoleUser", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.WorkTeamStatus", b =>
                {
                    b.Property<int>("WorkTeamStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkTeamStatusID"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("WorkTeamStatusID");

                    b.ToTable("WorkTeamStatus", "pms");
                });

            modelBuilder.Entity("PMS.Model.Entities.Employee", b =>
                {
                    b.HasOne("PMS.Model.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentID");

                    b.HasOne("PMS.Model.Entities.Speciality", "Speciality")
                        .WithMany("Employees")
                        .HasForeignKey("SpecialityID");

                    b.HasOne("PMS.Model.Entities.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("PMS.Model.Entities.Employee", "UserID");

                    b.Navigation("Department");

                    b.Navigation("Speciality");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMS.Model.Entities.ModuleAccessRole", b =>
                {
                    b.HasOne("PMS.Model.Entities.AccessRole", "AccessRole")
                        .WithMany("ModuleAccessRoles")
                        .HasForeignKey("AccessRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Model.Entities.Module", "Module")
                        .WithMany("ModuleAccessRoles")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessRole");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("PMS.Model.Entities.Project", b =>
                {
                    b.HasOne("PMS.Model.Entities.User", "CreatedByUser")
                        .WithMany("CreatedProjects")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Model.Entities.User", "Manager")
                        .WithMany("ManagedProjects")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Model.Entities.ProjectCategory", "ProjectCategory")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectCategoryID");

                    b.HasOne("PMS.Model.Entities.ProjectStatus", "ProjectStatus")
                        .WithMany("Projects")
                        .HasForeignKey("ProjectStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Manager");

                    b.Navigation("ProjectCategory");

                    b.Navigation("ProjectStatus");
                });

            modelBuilder.Entity("PMS.Model.Entities.ProjectRelease", b =>
                {
                    b.HasOne("PMS.Model.Entities.Project", "Project")
                        .WithMany("ProjectReleases")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PMS.Model.Entities.ProjectTask", b =>
                {
                    b.HasOne("PMS.Model.Entities.User", "CreatedByUser")
                        .WithMany("CreatedProjectTasks")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Model.Entities.User", "ExecutorUser")
                        .WithMany("TasksExecutedBy")
                        .HasForeignKey("ExecutorUserID");

                    b.HasOne("PMS.Model.Entities.ProjectTask", "ParentTask")
                        .WithMany("Subtasks")
                        .HasForeignKey("ParentTaskID");

                    b.HasOne("PMS.Model.Entities.ProjectRelease", "ProjectRelease")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectReleaseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Model.Entities.ProjectTaskCategory", "ProjectTaskCategory")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectTaskCategoryID");

                    b.HasOne("PMS.Model.Entities.ProjectTaskStatus", "ProjectTaskStatus")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectTaskStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Model.Entities.User", "ResponsibleUser")
                        .WithMany("ResponsibleForTasks")
                        .HasForeignKey("ResponsibleUserID");

                    b.Navigation("CreatedByUser");

                    b.Navigation("ExecutorUser");

                    b.Navigation("ParentTask");

                    b.Navigation("ProjectRelease");

                    b.Navigation("ProjectTaskCategory");

                    b.Navigation("ProjectTaskStatus");

                    b.Navigation("ResponsibleUser");
                });

            modelBuilder.Entity("PMS.Model.Entities.Sprint", b =>
                {
                    b.HasOne("PMS.Model.Entities.Project", "Project")
                        .WithMany("Sprints")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("PMS.Model.Entities.SprintTask", b =>
                {
                    b.HasOne("PMS.Model.Entities.ProjectTask", "ProjectTask")
                        .WithMany()
                        .HasForeignKey("ProjectTaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Model.Entities.Sprint", "Sprint")
                        .WithMany()
                        .HasForeignKey("SprintID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Model.Entities.SprintTaskStatus", "SprintTaskStatus")
                        .WithMany("SprintTasks")
                        .HasForeignKey("SprintTaskStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectTask");

                    b.Navigation("Sprint");

                    b.Navigation("SprintTaskStatus");
                });

            modelBuilder.Entity("PMS.Model.Entities.UserAccessRole", b =>
                {
                    b.HasOne("PMS.Model.Entities.AccessRole", "AccessRole")
                        .WithMany("UserAccessRoles")
                        .HasForeignKey("AccessRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Model.Entities.User", "User")
                        .WithMany("UserAccess")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccessRole");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PMS.Model.Entities.WorkTeam", b =>
                {
                    b.HasOne("PMS.Model.Entities.User", "CreatedByUser")
                        .WithMany("CreatedWorkTeams")
                        .HasForeignKey("CreatedByUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Model.Entities.Project", "Project")
                        .WithOne("WorkTeam")
                        .HasForeignKey("PMS.Model.Entities.WorkTeam", "ProjectID");

                    b.HasOne("PMS.Model.Entities.WorkTeamStatus", "WorkTeamStatus")
                        .WithMany("WorkTeams")
                        .HasForeignKey("WorkTeamStatusID");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Project");

                    b.Navigation("WorkTeamStatus");
                });

            modelBuilder.Entity("PMS.Model.Entities.WorkTeamRoleUser", b =>
                {
                    b.HasOne("PMS.Model.Entities.User", "User")
                        .WithMany("WorkTeams")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Model.Entities.WorkTeam", "WorkTeam")
                        .WithMany("WorkTeams")
                        .HasForeignKey("WorkTeamID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PMS.Model.Entities.WorkTeamRole", "WorkTeamRole")
                        .WithMany("WorkTeams")
                        .HasForeignKey("WorkTeamRoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("WorkTeam");

                    b.Navigation("WorkTeamRole");
                });

            modelBuilder.Entity("PMS.Model.Entities.AccessRole", b =>
                {
                    b.Navigation("ModuleAccessRoles");

                    b.Navigation("UserAccessRoles");
                });

            modelBuilder.Entity("PMS.Model.Entities.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("PMS.Model.Entities.Module", b =>
                {
                    b.Navigation("ModuleAccessRoles");
                });

            modelBuilder.Entity("PMS.Model.Entities.Project", b =>
                {
                    b.Navigation("ProjectReleases");

                    b.Navigation("Sprints");

                    b.Navigation("WorkTeam");
                });

            modelBuilder.Entity("PMS.Model.Entities.ProjectCategory", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("PMS.Model.Entities.ProjectRelease", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("PMS.Model.Entities.ProjectStatus", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("PMS.Model.Entities.ProjectTask", b =>
                {
                    b.Navigation("Subtasks");
                });

            modelBuilder.Entity("PMS.Model.Entities.ProjectTaskCategory", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("PMS.Model.Entities.ProjectTaskStatus", b =>
                {
                    b.Navigation("ProjectTasks");
                });

            modelBuilder.Entity("PMS.Model.Entities.Speciality", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("PMS.Model.Entities.SprintTaskStatus", b =>
                {
                    b.Navigation("SprintTasks");
                });

            modelBuilder.Entity("PMS.Model.Entities.User", b =>
                {
                    b.Navigation("CreatedProjectTasks");

                    b.Navigation("CreatedProjects");

                    b.Navigation("CreatedWorkTeams");

                    b.Navigation("Employee");

                    b.Navigation("ManagedProjects");

                    b.Navigation("ResponsibleForTasks");

                    b.Navigation("TasksExecutedBy");

                    b.Navigation("UserAccess");

                    b.Navigation("WorkTeams");
                });

            modelBuilder.Entity("PMS.Model.Entities.WorkTeam", b =>
                {
                    b.Navigation("WorkTeams");
                });

            modelBuilder.Entity("PMS.Model.Entities.WorkTeamRole", b =>
                {
                    b.Navigation("WorkTeams");
                });

            modelBuilder.Entity("PMS.Model.Entities.WorkTeamStatus", b =>
                {
                    b.Navigation("WorkTeams");
                });
#pragma warning restore 612, 618
        }
    }
}
